let mapleader = ','
nmap <leader>ne :NERDTree<cr>

set rtp+="/usr/share/vim-youcompleteme/plugin/youcompleteme.vim"
call plug#begin()

Plug 'junegunn/vim-easy-align'
Plug 'https://github.com/junegunn/vim-github-dashboard.git'
Plug 'https://github.com/scrooloose/nerdtree.git'
Plug 'https://github.com/tpope/vim-fugitive.git'
"Plug 'https://github.com/altercation/vim-colors-solarized.git'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-surround'
Plug 'https://github.com/Shougo/neocomplete.vim'
Plug 'https://github.com/ctrlpvim/ctrlp.vim'
Plug 'airblade/vim-gitgutter'
Plug 'honza/vim-snippets'
Plug 'terryma/vim-multiple-cursors'
Plug 'jiangmiao/auto-pairs'
Plug 'vim-syntastic/syntastic'
Plug 'chriskempson/base16-vim'

Plug 'Valloric/YouCompleteMe', { 'do': 'python3 install.py --clang-completer'  }

call plug#end()

set laststatus=2
set clipboard=unnamed
set encoding=utf-8
set number

filetype plugin on
filetype indent on

let base16colorspace=256  " Access colors present in 256 colorspace"
"show time in airline
let g:airline_section_b = '%{strftime("%H:%M")}'

" for youcompleteme
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_confirm_extra_conf = 0

"let g:ycm_global_ycm_extra_conf =
let g:ycm_path_to_python_interpreter = "/usr/bin/python3"
let g:ycm_server_python_interpreter = '/usr/bin/python3'

" for clang_complete
"let g:clang_library_path='/usr/lib/llvm-3.8/lib/libclang.so.1'

" for nerdcommenter
let g:NERDCompactSexyComs = 1
let g:NERDCommentEmptyLines = 1 
let g:NERDTrimTrailingWhitespace = 1


" for syntastic 
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
"
autocmd VimEnter * SyntasticToggleMode
"autocmd VimEnter * colorscheme base16-monokai-dark
let g:syntastic_python_python_exec = 'python3'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
"

" neocomplete configs
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3


" recommended key-mappings
" <cr>: close popup and save indent
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
	return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
	" for no inserting <cr> key
	" return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

" Close popup by <Space>.
inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"


" enable omni completions for neocomplete
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
